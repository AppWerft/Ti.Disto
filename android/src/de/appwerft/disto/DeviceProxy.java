/**
w * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.disto;

import java.util.List;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import ch.leica.sdk.Devices.BleDevice;
import ch.leica.sdk.Devices.Device;
import ch.leica.sdk.ErrorHandling.DeviceException;
import ch.leica.sdk.ErrorHandling.ErrorObject;
import ch.leica.sdk.Listeners.ErrorListener;
import ch.leica.sdk.Listeners.ReceivedDataListener;
import ch.leica.sdk.commands.ReceivedData;
import ch.leica.sdk.connection.ble.BleCharacteristic;
import android.app.Activity;

// This proxy can be created by calling Tidisto.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TidistoModule.class)
public class DeviceProxy extends KrollProxy implements Device.ConnectionListener, ErrorListener, ReceivedDataListener {
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private Device currentDevice;

	// Constructor
	public DeviceProxy(Device device) {
		super();
		currentDevice = device;
		currentDevice.setConnectionListener(this);
        currentDevice.setErrorListener(this);
        currentDevice.setReceiveDataListener(this);
	}

	
	// Methods
	@Kroll.method
	public void printMessage(String message) {
		Log.d(LCAT, "printing message: " + message);
	}

	@Kroll.getProperty
	@Kroll.method
	public String getName() {
		return currentDevice.getDeviceName();
	}
	@Kroll.getProperty
	@Kroll.method
	public String getId() {
		return currentDevice.getDeviceID();
	}
	
	@Kroll.getProperty
	@Kroll.method
	public KrollDict getAllCharacteristics() {
		KrollDict res = new KrollDict();
		try {
			List<BleCharacteristic> characteristics = currentDevice.getAllCharacteristics();
			for (BleCharacteristic characteristic : characteristics) {
				
			}
			
		} catch (DeviceException e) {
			e.printStackTrace();
		}
		return res;
	}
	
	@Override
    public void onConnectionStateChanged(final Device device, final Device.ConnectionState connectionState) {
        final String METHODTAG = ".onConnectionStateChanged";
        Log.i(LCAT, METHODTAG + ": " + device.getDeviceID() + ", state: " + connectionState);
        try {
            if (connectionState == Device.ConnectionState.disconnected) {
                return;
            }
            if(connectionState == Device.ConnectionState.connected){

//                uiHelper.setLog(InformationActivity.this, log, "connected to device.");
                // start bt connection
                try {
                    if (currentDevice != null && currentDevice instanceof BleDevice ) {
                        currentDevice.startBTConnection(new Device.BTConnectionCallback() {
                            @Override
                            public void onFinished() {
                                Log.d(METHODTAG, "NOW YOU CAN SEND COMMANDS TO THE DEVICE");
            //                    uiHelper.setLog(InformationActivity.this, log, "NOW YOU CAN SEND COMMANDS TO THE DEVICE");


                            }
                        });
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

              
                return;
            }



        } catch (Exception e) {
            Log.e(LCAT, METHODTAG, e);
        }

    }

    @Override
    public void onError(ErrorObject errorObject, Device device) {
   //     uiHelper.setLog(this, log, "onError" + ": " + errorObject.getErrorMessage() + ", errorCode: " + errorObject.getErrorCode());
    }

	@Override
	public void onAsyncDataReceived(ReceivedData arg0) {
		// TODO Auto-generated method stub
		
	}





}
