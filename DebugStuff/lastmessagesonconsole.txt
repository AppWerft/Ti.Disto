last words:

ch.leica.sdk.connection.ble.BleScanCallback.onScanResult - disto service found: 3ab10100-f831-4395-b29d-570977d5bf94
ch.leica.sdk.connection.ble.BleScanCallback.onScanResult - deviceName: DISTO X3 1110824, deviceAdress: F1:5D:8E:45:90:7D, bondState: 10
ch.leica.sdk.connection.ble.BleScanCallback.onScanResult -  matches if inside called for: DISTO X3 1110824
ch.leica.sdk.connection.BaseConnectionManager.foundAvailableBluetoothDevice - available BLE device found, tell listener now
ch.leica.sdk.Devices.DeviceManager.onBluetoothDeviceFound - called with DISTO X3 1110824, hasDistoService: true
ch.leica.sdk.Devices.DeviceManager.onBluetoothDeviceFound - checkNewAvailableDeviceForBle: by APP
ch.leica.sdk.Devices.DeviceManager.a - set hasDistoServiceBeforeConnection: true

with comments:

ch.leica.sdk.connection.ble.BleScanCallback.onScanResult - disto service found: 3ab10100-f831-4395-b29d-570977d5bf94
ch.leica.sdk.connection.ble.BleScanCallback.onScanResult - deviceName: DISTO X3 1110824, deviceAdress: F1:5D:8E:45:90:7D, bondState: 10
ch.leica.sdk.connection.ble.BleScanCallback.onScanResult -  matches if inside called for: DISTO X3 1110824
ch.leica.sdk.connection.BaseConnectionManager.foundAvailableBluetoothDevice - available BLE device found, tell listener now

ch.leica.sdk.Devices.DeviceManager.onBluetoothDeviceFound - called with DISTO X3 1110824, hasDistoService: true
ch.leica.sdk.Devices.DeviceManager.onBluetoothDeviceFound - checkNewAvailableDeviceForBle: by APP
This will logid in line 97 (inside public synchronized void onBluetoothDeviceFound())
and call `private ConcurrentHashMap<String, Device> a()` in L110
no skipping etc no retunr, only adds the foud device to a  ConcurrentHashMap 

ch.leica.sdk.Devices.DeviceManager.a - set hasDistoServiceBeforeConnection: true
